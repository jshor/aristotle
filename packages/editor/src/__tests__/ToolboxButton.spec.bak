

  describe('toggleToolboxVisibility()', () => {
    let toolboxButton

    beforeEach(() => {
      toolboxButton = { setVisible: jest.fn() }
      jest.spyOn(toolboxButton, 'setVisible')
    })

    it('should set the visibility if the toolbox element is present', () => {
      const isSelected = true

      element.toolboxButton = toolboxButton
      element.isSelected = jest.fn(() => isSelected)
      element.toggleToolboxVisibility()

      expect(toolboxButton.setVisible).toHaveBeenCalledTimes(1)
      expect(toolboxButton.setVisible).toHaveBeenCalledWith(isSelected)
    })

    it('should set the visibility if the toolbox element is present', () => {
      element.toolboxButton = null
      element.toggleToolboxVisibility()

      expect(toolboxButton.setVisible).not.toHaveBeenCalled()
    })
  })

  describe('fireToolboxEvent()', () => {
    const button = { x: 13, y: 99 }

    beforeEach(() => {
      element.canvas = {
        fireEvent: jest.fn(),
        fromCanvasToDocumentCoordinate (x, y) {
          return { x, y }
        }
      }
      element.settings = {
        foo: {
          value: 'bar'
        }
      }
      element.x = 42
      element.y = 69
    })

    it('should retrieve the canvas coordinates based on the given button ones', () => {
      const x = button.x + element.x
      const y = button.y + element.y

      jest.spyOn(element.canvas, 'fromCanvasToDocumentCoordinate')
      element.fireToolboxEvent(button)

      expect(element.canvas.fromCanvasToDocumentCoordinate).toHaveBeenCalledWith(x, y)
    })

    it('should fire the `toolbox` event with the toolbox position and element settings', () => {
      const x = button.x + element.x
      const y = button.y + element.y

      jest.spyOn(element.canvas, 'fromCanvasToDocumentCoordinate')
      element.fireToolboxEvent(button)

      expect(element.canvas.fireEvent).toHaveBeenCalledTimes(1)
      expect(element.canvas.fireEvent).toHaveBeenCalledWith('toolbox', {
        settings: element.settings,
        position: { x, y }
      })
    })
  })

  describe('createToolboxButton()', () => {
    beforeEach(() => {
      jest
        .spyOn(element, 'add')
        .mockImplementation(jest.fn())
    })

    describe.skip('when settings are defined and no toolbox button exists on the element', () => {
      beforeEach(() => {
        element.toolboxButton = null
        element.hasSettings = jest.fn(() => true)

        jest
          .spyOn(shape.icon.Wrench.prototype, 'on')
          .mockImplementation(jest.fn())

        element.createToolboxButton()
      })

      it('should define the toolbox button', () => {
        expect(element).toHaveProperty('toolboxButton')
        expect(element.toolboxButton).toBeDefined()
        expect(element.toolboxButton).toEqual(expect.any(shape.icon.Wrench))
      })

      it('should attach a new wrench icon to the element', () => {
        const { Wrench } = shape.icon
        const { XYAbsPortLocator } = layout.locator

        expect(element.add).toHaveBeenCalledTimes(1)
        expect(element.add).toHaveBeenCalledWith(expect.any(Wrench), expect.any(XYAbsPortLocator))
      })

      it('should set a click event on the toolbox button', () => {
        expect(shape.icon.Wrench.prototype.on).toHaveBeenCalledWith('click', element.fireToolboxEvent)
      })
    })

    it('should not add the toolbox button if one already exists', () => {
      element.toolboxButton = new shape.icon.Wrench()
      element.createToolboxButton()

      expect(element.add).not.toHaveBeenCalled()
    })

    it('should not add the toolbox button if no settings are defined on the element', () => {
      element.hasSettings = jest.fn(() => false)
      element.createToolboxButton()

      expect(element.add).not.toHaveBeenCalled()
    })
  })